######### DATAlign Pipeline

######### Place all .fastq files to be analyzed into a single working directory
######### Rename .fastq files such that each read pair ends with _R1.fastq or _R2.fastq
######### Currently DATAlign only supports .fastq input; gzipped files coming soon, but code can be manipulated to run gzipped files easily
######### Make filenames reference list for all subsequent codes; creates two files titled "filenames" and "filenames_uniq" containing file names listed

ls *.fastq | cut -f 1 -d '.' > filenames
ls *.fastq | sed 's/_R1.*//' | sed 's/_R2.*//' | uniq > filenames_uniq


######### Build and index desired database using bowtie2 
######### For antibiotic resistance database, download most recent data from: https://card.mcmaster.ca/download, place contents in working directory

bowtie2-build nucleotide_fasta_protein_homolog_model.fasta ARG_db


######### Trim/filter and QC fastq files

#Trim/filter fastq files based on quality â€“ For paired-end reads

while read p; do trimmomatic PE "$p"_R1.fastq "$p"_R2.fastq "$p"_R1_paired.fastq.gz "$p"_R1_unpaired.fastq.gz "$p"_R2_paired.fastq.gz "$p"_R2_unpaired.fastq.gz ILLUMINACLIP:TruSeq3-PE.fa:2:30:10:8:true SLIDINGWINDOW:4:20; done < filenames_uniq


#QC trimmed fastq files

while read p; do fastqc "$p"_paired.fastq.gz; done < filenames


######## Normalize read numbers across multiple fastq files

#Compute the number of reads in each fastq

while read p; do gunzip -c "$p"_paired.fastq.gz | wc -l | awk '{print $1 / 4}' >> numreads; done < filenames


#Compute the minimum number of reads across all fastqs in the folder

minreads=$(cat numreads | sort -n | head -1)


#subsample fastq files

while read p; do seqtk sample -s100 "$p"_paired.fastq.gz $minreads | gzip > "$p".sub.fastq.gz; done < filenames


######## Alignment pipeline

# first pipe: runs alignment of fastq to database, creates .sam file, extracts and outputs only mapped/aligned reads
# second pipe: converts .sam to .bam
# third pipe: sorts the bam file in order of database sequence appearance

while read p; do bowtie2 --threads 2 -x ARG_db -1 "$p"_R1.sub.fastq.gz -2 "$p"_R2.sub.fastq.gz --no-unal | samtools view -bS - | samtools sort -o - > "$p"_ARG.bam; done < filenames_uniq


######## create comparison plots of mapped reads

# create table of total mapped reads in each sample  

while read p; do mapped=$(samtools view -c -F 4 ${p}_ARG.bam); printf "$p\t$mapped\n"; done < filenames_trim > ARG-mapped.tsv 


# create barplot to compare TOTAL mapped reads across samples

gnuplot -e "set terminal png size 640,300; set output 'ARG_mapped_read_barplot.png'; set boxwidth 0.4; set style fill solid 1.00; set terminal png nocrop enhanced font 'verdana,10' size 640,300; set nokey; set title 'ARG Mapped Reads'; set ylabel 'Mapped Reads'; plot 'ARG-mapped.tsv' using 2:xticlabels(1) with boxes lt rgb '#406090'"


## Generate report of mapped reads that cover 20% of target loci ("-c 0.2"); optional: change number value to change coverage cutoff

while read p; do groot report --bamFile "$p"_ARG.bam -c 0.2 > "$p".report; done < filenames_uniq


######## coverage plot-generating code coming soon!!


